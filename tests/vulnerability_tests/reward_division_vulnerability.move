// Tests for division error in reward calculation
module tests::reward_division {
    use sui::test_scenario;
    use sui::coin::{Self, Coin};
    use sui::clock::{Self, Clock};
    use main::{Self, Leaderboard, ProjectManager};

    #[test]
    #[expected_failure(abort_code = 3)] // Should fail when fix is implemented
    fun test_reward_division() {
        let scenario = test_scenario::begin(@0x1);
        let creator = @0x2;
        let attacker = @0x3;
        
        // Create leaderboard with rewards
        test_scenario::next_tx(&mut scenario, creator);
        {
            let manager = main::create_project_manager(test_scenario::ctx(&mut scenario));
            let clock = clock::create_for_testing(test_scenario::ctx(&mut scenario));
            let coin = coin::mint_for_testing(1000, test_scenario::ctx(&mut scenario));
            
            let leaderboard = main::create_leaderboard(
                &mut manager,
                coin,
                1000000, // end timestamp
                test_scenario::ctx(&mut scenario)
            );
            
            // Set claimed rewards to 29 (one less than max)
            main::set_claimed_rewards(&mut leaderboard, 29);
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            clock::destroy_for_testing(clock);
        };

        // Try to claim reward when claimed_reward_amount is at max
        test_scenario::next_tx(&mut scenario, attacker);
        {
            let manager = test_scenario::take_shared<ProjectManager>(&scenario);
            let leaderboard = test_scenario::take_shared<Leaderboard>(&scenario);
            let clock = clock::create_for_testing(test_scenario::ctx(&mut scenario));
            let coin = coin::mint_for_testing(100, test_scenario::ctx(&mut scenario));
            
            // Create project
            let cap = main::create_project(
                &mut manager,
                &mut leaderboard,
                coin,
                test_scenario::ctx(&mut scenario)
            );
            
            // Try to claim reward (should fail due to division by zero)
            main::claim_reward(
                &mut manager,
                cap,
                &mut leaderboard,
                &clock,
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            clock::destroy_for_testing(clock);
        };
        test_scenario::end(scenario);
    }
} 