// Tests for project creation after end time
module tests::expired_project_creation {
    use sui::test_scenario;
    use sui::coin::{Self, Coin};
    use sui::clock::{Self, Clock};
    use main::{Self, Leaderboard, ProjectManager};

    #[test]
    #[expected_failure(abort_code = 2)] // Should fail when fix is implemented
    fun test_expired_project_creation() {
        let scenario = test_scenario::begin(@0x1);
        let creator = @0x2;
        let attacker = @0x3;

        // Create leaderboard with end time
        test_scenario::next_tx(&mut scenario, creator);
        {
            let manager = main::create_project_manager(test_scenario::ctx(&mut scenario));
            let clock = clock::create_for_testing(test_scenario::ctx(&mut scenario));
            let coin = coin::mint_for_testing(1000, test_scenario::ctx(&mut scenario));
            
            let leaderboard = main::create_leaderboard(
                &mut manager,
                coin,
                1000, // end timestamp (small value)
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            clock::destroy_for_testing(clock);
        };

        // Attempt to create project after end time
        test_scenario::next_tx(&mut scenario, attacker);
        {
            let manager = test_scenario::take_shared<ProjectManager>(&scenario);
            let leaderboard = test_scenario::take_shared<Leaderboard>(&scenario);
            let clock = clock::create_for_testing(test_scenario::ctx(&mut scenario));
            let coin = coin::mint_for_testing(100, test_scenario::ctx(&mut scenario));
            
            // Set clock to after end time
            clock::set_for_testing(&mut clock, 2000);
            
            // Try to create project after end time
            let cap = main::create_project(
                &mut manager,
                &mut leaderboard,
                coin,
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            test_scenario::return_to_sender(&scenario, cap);
            clock::destroy_for_testing(clock);
        };
        test_scenario::end(scenario);
    }
} 