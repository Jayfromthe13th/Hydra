// Tests for cross-leaderboard voting exploit
module tests::cross_leaderboard_voting {
    use std::vector;
    use std::signer;
    use game::main::{Self, Leaderboard, ProjectManager};

    #[test]
    #[expected_failure(abort_code = 1)] // Should fail when fix is implemented
    fun test_cross_leaderboard_voting() {
        // Create test account
        let account = @0x1;
        let signer = create_signer_for_extending(account);

        // Create first leaderboard
        {
            main::create_project_manager(&signer);
            let manager = borrow_global_mut<ProjectManager>(account);
            main::create_leaderboard(&signer, manager, 1000);
            let leaderboard = vector::borrow_mut(&mut manager.leaderboards, 0);
            main::create_project(&signer, leaderboard, 100);
        };

        // Create second leaderboard
        {
            let manager = borrow_global_mut<ProjectManager>(account);
            main::create_leaderboard(&signer, manager, 1000);
            let leaderboard2 = vector::borrow_mut(&mut manager.leaderboards, 1);
            main::create_project(&signer, leaderboard2, 200);
        };

        // Attempt to vote across leaderboards
        {
            let manager = borrow_global_mut<ProjectManager>(account);
            let leaderboard = vector::borrow_mut(&mut manager.leaderboards, 0);
            let project_id = vector::borrow(&leaderboard.projects, 0).id;
// Tests for cross-leaderboard voting exploit
module tests::cross_leaderboard_voting {
    use std::vector;
    use game::main::{Self, Leaderboard, ProjectManager};

    #[test]
    #[expected_failure(abort_code = 1)] // Should fail when fix is implemented
    fun test_cross_leaderboard_voting() {
        // Create first leaderboard
        {
            main::create_project_manager();
            let manager = borrow_global_mut<ProjectManager>(@0x1);
            main::create_leaderboard(manager, 1000);
            let leaderboard = vector::borrow_mut(&mut manager.leaderboards, 0);
            main::create_project(leaderboard, 100);
        };

        // Create second leaderboard
        {
            let manager = borrow_global_mut<ProjectManager>(@0x1);
            main::create_leaderboard(manager, 1000);
            let leaderboard2 = vector::borrow_mut(&mut manager.leaderboards, 1);
            main::create_project(leaderboard2, 200);
        };

        // Attempt to vote across leaderboards
        {
            let manager = borrow_global_mut<ProjectManager>(@0x1);
            let leaderboard = vector::borrow_mut(&mut manager.leaderboards, 0);
            let project_id = vector::borrow(&leaderboard.projects, 0).id;
            main::vote(leaderboard, project_id);
        };
    }
} 