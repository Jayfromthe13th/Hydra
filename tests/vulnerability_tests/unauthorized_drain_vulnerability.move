// Tests for unauthorized draining of project funds
module tests::unauthorized_drain {
    use sui::test_scenario;
    use sui::coin::{Self, Coin};
    use sui::clock::{Self, Clock};
    use main::{Self, Leaderboard, ProjectManager};

    #[test]
    #[expected_failure(abort_code = 5)] // Should fail when fix is implemented
    fun test_unauthorized_drain() {
        let scenario = test_scenario::begin(@0x1);
        let creator = @0x2;
        let project_owner = @0x3;
        let attacker = @0x4;
        
        // Setup leaderboard and project
        test_scenario::next_tx(&mut scenario, creator);
        {
            let manager = main::create_project_manager(test_scenario::ctx(&mut scenario));
            let clock = clock::create_for_testing(test_scenario::ctx(&mut scenario));
            let coin = coin::mint_for_testing(1000, test_scenario::ctx(&mut scenario));
            
            let leaderboard = main::create_leaderboard(
                &mut manager,
                coin,
                1000000, // end timestamp
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            clock::destroy_for_testing(clock);
        };

        // Create project with funds
        test_scenario::next_tx(&mut scenario, project_owner);
        {
            let manager = test_scenario::take_shared<ProjectManager>(&scenario);
            let leaderboard = test_scenario::take_shared<Leaderboard>(&scenario);
            let coin = coin::mint_for_testing(500, test_scenario::ctx(&mut scenario));
            
            let cap = main::create_project(
                &mut manager,
                &mut leaderboard,
                coin,
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            test_scenario::return_to_sender(&scenario, cap);
        };

        // Attempt unauthorized drain
        test_scenario::next_tx(&mut scenario, attacker);
        {
            let manager = test_scenario::take_shared<ProjectManager>(&scenario);
            let leaderboard = test_scenario::take_shared<Leaderboard>(&scenario);
            
            // Try to drain project funds through check_out_project
            let project_id = test_utils::get_last_created_id();
            main::check_out_project(
                &mut manager,
                &leaderboard,
                project_id,
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
        };
        test_scenario::end(scenario);
    }
} 