// Tests for unauthorized withdrawal through missing cap verification
module tests::owner_cap_bypass {
    use sui::test_scenario;
    use main::{Self, Leaderboard, ProjectManager};
    use sui::coin::{Self, Coin};
    use sui::test_utils;

    #[test]
    #[expected_failure(abort_code = 1)] // Expect failure due to invalid capability
    fun test_owner_cap_bypass() {
        let scenario = test_scenario::begin(@0x1);
        let owner = @0x2;
        let attacker = @0x3;

        // First, create a project as the owner
        test_scenario::next_tx(&mut scenario, owner);
        {
            let manager = test_scenario::take_shared<ProjectManager>(&scenario);
            let leaderboard = test_scenario::take_shared<Leaderboard>(&scenario);
            let coin = coin::mint_for_testing(1000, test_scenario::ctx(&mut scenario));
            
            // Owner creates their project
            let owner_cap = main::create_project(
                &mut manager,
                &mut leaderboard,
                coin,
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
            test_scenario::return_to_sender(&scenario, owner_cap);
        };

        // Now try to withdraw as attacker using a different project's cap
        test_scenario::next_tx(&mut scenario, attacker);
        {
            let manager = test_scenario::take_shared<ProjectManager>(&scenario);
            let leaderboard = test_scenario::take_shared<Leaderboard>(&scenario);
            let coin = coin::mint_for_testing(100, test_scenario::ctx(&mut scenario));
            
            // Attacker creates their own project to get a cap
            let attacker_cap = main::create_project(
                &mut manager,
                &mut leaderboard,
                coin,
                test_scenario::ctx(&mut scenario)
            );
            
            // Try to withdraw owner's project using attacker's cap
            // This should fail with the assertion we added
            let owner_project_id = test_utils::get_last_created_id();
            main::withdraw(
                &mut manager,
                attacker_cap, // Using attacker's cap
                &mut leaderboard,
                owner_project_id, // Trying to withdraw owner's project
                test_scenario::ctx(&mut scenario)
            );
            
            test_scenario::return_shared(manager);
            test_scenario::return_shared(leaderboard);
        };
        test_scenario::end(scenario);
    }
} 